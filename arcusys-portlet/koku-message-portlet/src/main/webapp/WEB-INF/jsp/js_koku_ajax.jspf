 
/**
 * Base class for KokuAjax calls
 *  
 */ 
function KokuAjax(renderUrls) {

	/*************************************
	 * Public properties
	 */
	this.renderUrls = renderUrls; 
		 
};

KokuAjax.prototype.formatUrl = function(url) {
	var newUrl;
	newUrl = url.replace(/&quot;/g,'"');
	newUrl = newUrl.replace(/&amp;/g,"&");
	newUrl = newUrl.replace(/&lt;/g,"<");
	newUrl =  newUrl.replace(/&gt;/g,">");
	return newUrl;
};


KokuAjax.prototype.genericAjaxCall = function(messageList, callback, url) {	 
 	if (messageList.length == 0) {
		callback("FAIL");
		return;
	}		
 	jQuery.post(url, {'messageList':messageList}, function(data) {
			var obj = jQuery.parseJSON(data);
			var json = obj.response;
			var result = json["result"];
			callback(result);
	});
 };
 
/**
 * Archives a list of messages selected by user
 */
KokuAjax.prototype.archiveMessages = function(messageList, callback) {	
	var url= this.renderUrls.archiveUrl;
	url = this.formatUrl(url);
	this.genericAjaxCall(messageList, callback, url);		
};

/**
 * Archives a old messages by given folder
 */
KokuAjax.prototype.archiveMessagesOld = function(folderType, callback) {	
	var url= this.renderUrls.archiveOldUrl;
	url = this.formatUrl(url);
	jQuery.post(url, {'folderType':folderType}, function(data) {
			var obj = jQuery.parseJSON(data);
			var json = obj.response;
			var result = json["result"];
			callback(result);
	});
};

/**
 * Deletes a list of messages selected by user
 */
KokuAjax.prototype.deleteMessages = function(messageList, callback) {	
	var url= this.renderUrls.deleteUrl;
	url = this.formatUrl(url);
	this.genericAjaxCall(messageList, callback, url);	
};

/**
 * Revokes a list of consents selected by user
 */
KokuAjax.prototype.revokeConsents = function(messageList, callback) {	
	var url = this.renderUrls.revokeUrl;
	url = this.formatUrl(url);
	this.genericAjaxCall(messageList, callback, url);
};

/**
 * Cancels a list of appointments selected by user
 */	
KokuAjax.prototype.cancelAppointments = function(messageList, targetPersons, comment, callback) {
	if (messageList.length == 0) {
		callback("FAIL");
		return;
	}

	var url = this.renderUrls.cancelUrl;
	url = this.formatUrl(url);
	
	jQuery.post(url, {'messageList':messageList, 'targetPersons':targetPersons, 'comment':comment}, function(data) {
		var obj = jQuery.parseJSON(data);
		var json = obj.response;
		var result = json["result"];
		callback(result);
	});
};

/**
 * Disables an appointment slot selected by employee
 */
KokuAjax.prototype.disableAppointmentSlot = function(appointmentId, slotNumber, callback) {
	var url = this.renderUrls.disableSlotUrl;
	url = this.formatUrl(url);

	jQuery.post(url, {'appId':appointmentId, 'slotNumber':slotNumber}, function(data) {
		var obj = jQuery.parseJSON(data);
		var json = obj.response;
		var result = json["result"];
		callback(result);
	});
};

/* Shows detailed message page */
KokuAjax.prototype.showMessage = function(messageId) {
	var url = this.renderUrls.messageUrl;
	url = this.formatUrl(url);
	url += "&messageId="+messageId;
	window.location = url;
};

/* Shows detailed warrant page */
KokuAjax.prototype.showWarrant = function(index) {	
	var authorizationId = pageObj.tasks[index]['authorizationId'];	
	url = this.renderUrls.warrantUrl;
	url = this.formatUrl(url);
	url += "&authorizationId="+authorizationId;
	url += "&taskType="+pageObj.taskType;
	window.location = url;
};

/* Creates a renderURL by ajax, to show the detailed request page */
KokuAjax.prototype.showResponse = function(index) {
	var task = pageObj.tasks[index];
	var responseId = task["responseId"];
	var url = this.renderUrls.responseUrl;	
	url = this.formatUrl(url);
	url += "&responseId="+responseId;
	url += "&taskType="+pageObj.taskType;
	window.location = url;
};

/* Shows detailed appointment page */
KokuAjax.prototype.showAppointment = function(index) {

	var task = pageObj.tasks[index];
	var appointmentId = task["appointmentId"];
	var targetPersonUid = null;
	if (typeof task["targetPersonUser"] !== 'undefined') {
		targetPersonUid = task["targetPersonUser"]["uid"];
	}
	if (typeof targetPersonUid === 'undefined' || targetPersonUid === null) {
		targetPersonUid = "";
	}
	var url="";
	
	if (pageObj.taskType == "<%= Constants.TASK_TYPE_APPOINTMENT_RESPONSE_EMPLOYEE%>" 
	 || pageObj.taskType == "<%= Constants.TASK_TYPE_APPOINTMENT_RESPONSE_CITIZEN%>"
	 || pageObj.taskType == "<%= Constants.TASK_TYPE_APPOINTMENT_RESPONSE_CITIZEN_OLD%>") {		
		url = this.renderUrls.appointmentUrl;
		url = this.formatUrl(url);
		url += "&appointmentId="+appointmentId;
		url += "&taskType="+pageObj.taskType;
		url += "&targetPerson="+targetPersonUid;
		window.location = url;
	} else if(pageObj.taskType == "<%= Constants.TASK_TYPE_APPOINTMENT_INBOX_EMPLOYEE %>"){
		url = "<%= portletPath %><%= NavigationPortletProperties.APPOINTMENTS_NEW_APPOINTMENT %>" + "?FormID=" + appointmentId;
		window.location = url;			
	} else if(pageObj.taskType == "<%= Constants.TASK_TYPE_APPOINTMENT_INBOX_CITIZEN %>") {
		url = "<%= portletPath %><%= NavigationPortletProperties.CONSENTS_ANSWER_TO_CONSENT %>" + "?FormID=" + appointmentId + "&arg1=" + targetPersonUid;
		window.location = url;				
	}					
};


/**
 * Execute ajax query in Post way, and parse the Json format response, and
 * then create tasks in table and task page filed.
 */
KokuAjax.prototype.ajaxGetTasks = function(pageObj, presentTasks) {

	if (pageObj === undefined || pageObj === null) {		
		/* console.error("Bug in code!! pageObj undefined or null"); */
		return;
	}
	
	if (presentTasks === undefined || presentTasks === null) {
		/* console.error("Bug in code!! presentTasks undefined or null"); */
		return;
	}

	if(pageObj.loginStatus != 'VALID') {
		return;
	}
		
	var url = this.renderUrls.ajaxTaskUrl;
	url = this.formatUrl(url);

	pageObj.taskType = pageObj.getTaskTypeFromNavi();
	
	jQuery.post(url, {page:pageObj.currentPage, taskType:pageObj.taskType, 
		keyword:pageObj.keyword, orderType:pageObj.orderType, field:pageObj.field}, function(data) {
		var obj = jQuery.parseJSON(data);
		var json = obj.response;
		pageObj.loginStatus = json["loginStatus"];
		
		/* Show error message to user if something goes wrong in server */
		if (json["result"] === "FAIL") {
			// show errorMsg
			var options = { 
				sticky: true,
				theme : "serverErrorWarningMsg",
				header: "Oops!",
				closer: true,
				position: "center"		
			};
			var msg = "<div class=\"serverErrorMsg\"><spring:message code="notification.serverError.msg" /></div><div class=\"serverErrorUuidMsg\"><spring:message code="notification.serverError.uuidMsg" /><span class=\"failureUuid\">" + KokuUtil.escapeHTML(json["failureUuid"]) + "</span></div>";
			jQuery.jGrowl(msg, options);
			KokuUtil.timer.removeRefreshTimer(kokuConfig);
		}
		
		if (pageObj.loginStatus == 'VALID') {
			pageObj.totalPages = json["totalPages"];
			pageObj.totalItems = json["totalItems"];
			var tasks = json["tasks"];
			pageObj.tasks = tasks;
			presentTasks(tasks);
			
			/* Popup titles */
			jQuery('span.jQueryToolTip').qtip({  
				show: kokuToolTipSettings.show,
				hide: 'mouseout',
				style: kokuToolTipSettings.style
			});
			
			/* Popup titles with HTML */
			jQuery('span.jQueryToolTipHtml').qtip({ 
				content: { text: '---' },
				show: kokuToolTipSettings.show,
				hide: 'mouseout',
				style: kokuToolTipSettings.style,
				api : {
					beforeRender : function() {
						var description = this.elements.target.children().html();
						var content = { 
							prerender : false,
							text : description, 
							title : {
								button : false,
								text : false							
							},
							url : false
						 };
						this.options.content = content;						
					}
				}
			});
			
				
		} else {
			var message = "<spring:message code="error.unLogin" />";
			KokuUtil.errorMsg.showErrorMessage(message);
		}
	});
};

