
<%@ include file="js_navigationState.jspf" %>
var kokuNavigationState = new KokuNavigationState;

function updateNavigationStatus(currentPosition, navigationState, callback) {
	var url="<%= naviStatusURL %>";
	url = formatUrl(url);
	var naviState = JSON.stringify(navigationState.getStatus());
	
	jQuery.post(url, {currentPosition: currentPosition, navigationState: naviState}, function(data) {
		var obj = jQuery.parseJSON(data);
		var naviState = obj.navigationState;
		koku_navi_type = obj.navigationPosition;
		if (typeof callback != 'undefined' && callback != null) {
			callback();
		}
	});
}

<% if (navigationPosition == null) { %> 
var koku_navi_type = null; 
<% } else { %> 
var koku_navi_type = '<%= navigationPosition %>';
<% } %>
if (!koku_navi_type) {
	updateNavigationStatus("", kokuNavigationState);
}

var defaultPath = "<%= defaultPath %>";
var naviRefreshTimer;


	
jQuery(document).ready(function() {
	
	function openSavedNavigation() {
		// Find and close all #child elements 
		var data = '<%= navigationState %>';
		openSavedTreeNodes(data);	
	}
	
	jQuery('.child').hide();
	focusCurrentItem(koku_navi_type);	
	openSavedNavigation();
	ajaxUpdate();		
	clearInterval(naviRefreshTimer);	
});


/**
 * Finds the current item in navigation list and decorates the item, e.g. bold font 
 */
function focusCurrentItem(naviType) {

	function bold(elementId) {
	
		function getIndicatorElement(element) {
			if (typeof element == 'undefined' || element == null) {
				return;
			}
			return element.siblings('.naviLinkHeaderNonLink').children('.kokuNaviTreeNodeIndicator');			
		}
		
		function changeParentTreeIndicatorsToOpen(parentElement) {
			getIndicatorElement(parentElement).html('-');
		}
		
		function rememberCurrentOpenNode(element) {	
			if (typeof element == 'undefined' || element == null) {
				return;
			}
			
			var indicatorElements = getIndicatorElement(element);
			var indicatorId = indicatorElements.get(0).attributes.id.value;
			var elemId = element.attr('id');		
			openKokuNavi('#'+elemId, '#'+indicatorId);
		}
	
		jQuery(elementId).css("font-weight", "bold");
		// Find and close all #child elements
		jQuery('.child').hide();
		// leave only elementId parent(s) open.
		var moreParents = true;
		var parentElement = jQuery(elementId).parent();
		if (parentElement == null) {
			return;
		}
		changeParentTreeIndicatorsToOpen(parentElement);
		rememberCurrentOpenNode(parentElement);
		
		var maxLoops = 0;
		while(moreParents && maxLoops <= 10) {
			if (parentElement.attr('id') === "koku-navigation") {
				moreParents = false;	
			} else {
				parentElement.show();
			}
			parentElement = parentElement.parent();
			changeParentTreeIndicatorsToOpen(parentElement);
			maxLoops++;
		}
	};

	/* Oh gosh.. this part really needs refactoring */

	var currentPage = "<%= currentPage %>";	
	switch(currentPage) {
		case '<%= defaultPage %>':		
			// var naviType = readKokuCookie();
			if(typeof naviType != 'undefined' && naviType != null && naviType != null) {
				bold("#"+naviType);				
			} else {
				bold('#msg_inbox'); 
			}
			break;		
		case 'NewMessage' : bold('#msg_new'); break;
		case 'NewRequest' : bold('#req_new'); break;		
		case 'ValidRequest' : bold('#req_valid_request'); break;
		case 'NewAppointment' : bold('#app_new'); break;
		case 'NewKindergarten' : bold('#kid_new'); break;
		case 'ConfirmApplications' : bold('#applicationsConfirm'); break;
		case 'NewConsent' : bold('#cst_new'); break;
		case 'FillConsent' : bold('#fillconsent'); break;
		case 'SendConsent' : bold('#sendconsent'); break;	
		case 'SelaaValtakirjoja' : bold('#selaaOmiaValtakirjoja'); break;
		case 'Ilmoitukset' : bold('#info_request_open'); break;
		default: bold("#" + currentPage.toLowerCase()); break;
	}
};

/* Formats url mainly for gatein epp*/
	function formatUrl(url) {
		var newUrl;
		newUrl = url.replace(/&quot;/g,'"');
		newUrl = newUrl.replace(/&amp;/g,"&");
		newUrl = newUrl.replace(/&lt;/g,"<");
		newUrl =  newUrl.replace(/&gt;/g,">");
		return newUrl;
};

function escapeHTML(value) {
    return value.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
}

function openSavedTreeNodes(navigationState) {
	if (typeof navigationState == 'undefined' && navigationState == null) {
		return;
	}
	navigationStateParsed = JSON.parse(navigationState);
	var treeNode;
	var node;
	for (node in navigationStateParsed) {
		treeNode = navigationStateParsed[node];
		openKokuNavi(treeNode.toggleId, treeNode.indicatorId);
	}
}

/**
 * Execute ajax query in Post way, and parse the Json format response, and
 * then create tasks in table and task page filed.
 */
function ajaxUpdate() {	
	
	/**
	 * Updates the new message number to indicate user
	 */
	function updateMessageNum(inboxNum, archiveInboxNum, consentsTotal, appointmentsTotal, requestsTotal, infoRequestsTotal) {	
		
		function updateMsgCounter(elementId, count) {
			element = jQuery(elementId);
			if (count && !isNaN(count) && count != 0) {
				element.html('(' +count+')');
			} else if (count !== undefined && count != 0 && isNaN(count)) {
				element.html('(' + escapeHTML(count) + ')');
			} else {
				element.html("");
			}
		};
		
		updateMsgCounter('#inbox_num', inboxNum);
		updateMsgCounter('#archive_inbox_num', archiveInboxNum);
		updateMsgCounter('#consents_num', consentsTotal);
		updateMsgCounter('#appointments_num', appointmentsTotal);
		updateMsgCounter('#requests_num', requestsTotal);
		updateMsgCounter('#infoRequests_num', infoRequestsTotal);
	};
	
	
		
	
	var url="<%= ajaxURL %>";
	url = formatUrl(url);
	
	jQuery.ajax({
		  type: 'POST',
		  url: url,
		  global:false,
		  // data: {navigationState: kokuNavigationState.getStatus()},
		  success: function(data) {
				var obj = jQuery.parseJSON(data);
				var json = obj.response;
				var navi_login_status = json["<%=Constants.JSON_LOGIN_STATUS %>"];
				// openSavedTreeNodes(obj.navigationState);
				
				if(navi_login_status == '<%=Constants.TOKEN_STATUS_VALID %>') {
					updateMessageNum(
							json["<%=Constants.JSON_INBOX %>"],
							json["<%=Constants.JSON_ARCHIVE_INBOX %>"],
							json["<%=Constants.JSON_CONSENTS_TOTAL %>"],
							json["<%=Constants.JSON_APPOINTMENT_TOTAL %>"],
							json["<%=Constants.JSON_REQUESTS_TOTAL %>"],
							json["<%=Constants.JSON_INFO_REQUESTS_TOTAL %>"]
						);
				}
				naviRefreshTimer = setTimeout('ajaxUpdate()', 30000);		
		  }
		});
};



function toggleKokuNavi(toggleId, indicatorId, ajaxUpdate) {

	if (typeof ajaxUpdate == 'undefined' || ajaxUpdate == null) {
		ajaxUpdate = true;
	}
	var indicator = jQuery(indicatorId);
	if (indicator.html() == "+") {
		openKokuNavi(toggleId, indicatorId);
	} else {
		closeKokuNavi(toggleId, indicatorId);
	}	
	if (ajaxUpdate) {
		updateNavigationStatus(koku_navi_type, kokuNavigationState);
	}
}

function openKokuNavi(toggleId, indicatorId) {
	jQuery(toggleId).show('fast');
	var indicator = jQuery(indicatorId);
	indicator.html('-');
	kokuNavigationState.add(toggleId, indicatorId);
}

function closeKokuNavi(toggleId, indicatorId) {
	jQuery(toggleId).hide('fast');
	var indicator = jQuery(indicatorId);	
	indicator.html('+');
	kokuNavigationState.remove(toggleId);
}

function navigateToPage(naviType) {
	if (typeof kokuNavigationHelper === "undefined" || kokuNavigationHelper === null) {
		// createKokuCookie(naviType);
		updateNavigationStatus(naviType, kokuNavigationState, function() {
			window.location = "<%= defaultPath %>" + "?resetView=true&NAVI_TYPE=" + naviType;
			return;
		});		
	}
	if (typeof kokuNavigationHelper.getHelperIdentifier() === "undefined") {
		/* console.error("Bug in code!! kokuNavigationHelper.getHelperIdentifier() is not defined!"); */
		return;
	}
	/* If navi_type is missing we are not in Message-portlet page ->  */
	updateNavigationStatus(naviType, kokuNavigationState, function() {
		// createKokuCookie(naviType);
	
		/* Update current position in navigation to server (session)  */
		switch(kokuNavigationHelper.getHelperIdentifier()) {
			case "MessagePortlet":
				window.location = kokuNavigationHelper.getReturnMainPageLink() + "&NAVI_TYPE=" + naviType;
				break;
			default:
				window.location = "<%= defaultPath %>" + "?resetView=true&NAVI_TYPE=" + naviType;
				break;
			}
	});
}
